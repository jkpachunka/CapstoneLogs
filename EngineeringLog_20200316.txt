Engineering Log Entry
-------------------------------------------------------
NAME: Jon Pachunka
TERM: Spring 2020
PROJECT: Ankle Strength Analysis Platform (ASAP)
-------------------------------------------------------
DATE: 03/16/2020
-------------------------------------------------------
CIN: 	13:00
COUT: 	14:30
HOURS: 	

TITLE: Motor Driver Development Continued

NOTES:
	- Hope to complete the final motor driver speed control functions by the end of the current work session.
	- Identified the ARR variable present in the timer type to be the control variable for the Auto Reload Register
		https://www.youtube.com/watch?v=WMS0t9WGqVw
	- This will allow for contorl over the frequency of the overall output signal of the PWM signal generated by the MCU
	- Began reasearching the new faster solutions to receive the connector components for the rotary encoder
	- The CCR and ARR will need to be adjusted at the same time in order to maintain the same duty cycle
	- There may be some issues with an overflow eventy being required to load the new values
	- Any delay will likely not be noticeable to the end user
	- 


	// This is more of a speed configuration than a counter function.
	bool button_control_motor(TIM_HandleTypeDef timer ,GPIO_TypeDef* gpio, uint16_t gpio_pin) {
	bool status = false;
	if (!(HAL_GPIO_ReadPin(gpio, gpio_pin))) // if the user button is pressed
	{
		while (!(HAL_GPIO_ReadPin(gpio, gpio_pin)));  // wait for the button to be released
		// Modifies Channel 2 duty cycle.
		//timer.Instance->CCR2 = increment; // increase the pulse width in the steps of 10

		// Modifies Channel 2 Frequency.
		timer.Instance->ARR = increment;
		increment += 10;  // increment in 10 steps or by 10% for the duty cycle
		if (increment > 100)
			increment = 0;   // if increment is > 100 than reset its value to 0
		status = true;
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	return status;
}
-------------------------------------------------------
CIN: 	15:15
COUT: 	19:30
HOURS: 	

TITLE: Motor Driver Development Continued

NOTES:
	- Team members present: Antony Habib
	- Location: Biomechanics Research Building (BRB)
	- Attempt to do a live implementation of the variable motor control system
	- Utilizing the power supply from the Biomechanics Research Building to supply power to the device
	- Able to successfullly implement the motor controller in the fixed frequency configuration as done before
	- Now firmware will be updated to allow for the variation of the PWM frequency
	- Initial implementation of the tes_control function which changes the speed of the motor based on button clicks
	- Prescaler set to 84
	- Set the ARR to 100 for 10 kHz
	- Set the ARR to 200 for 5 kHz
	- Set the ARR to 1000 for 1 kHz
	- Set the ARR to 10000 for 100 Hz
	- Able to successfully adjust the speed of the motor manually using directly written values
	- In order to reduce processing time a lookup table will be used with known values when controlling the overall speed of the motor
	- Able tp successfully vary the speed of the of the motor by adjusting the counter and pulse values for the motor
	- Original Equation: fout = (fin / Presacaler) / Counter
		- Lookup table equation derivation:
	 		- fout * Prescaler / fin = Counter
	- Calculation for generatiing the counter and pulse values
		- ARR = (fout * Prescaler) / fin
		- ARR = ((fin/Pre) / fout)
-------------------------------------------------------