Engineering Log Entry
-------------------------------------------------------
NAME: Jon Pachunka
TERM: Spring 2020
PROJECT: Ankle Strength Analysis Platform (ASAP)
-------------------------------------------------------
DATE: 03/15/2020
-------------------------------------------------------
CIN: 	11:30
COUT: 	14:39
HOURS: 	

TITLE: Motor Driver Development Continued

NOTES:
	- Plan to work on completing the variable speed control functions that were under development on 03/12-03/14
	- Identification of the proper control variable to manipulate is required for further advancement on the speed control
	- Explored this link which provided a method for dynamically changing the pulse width of the waveform produced by the timer:
		https://stackoverflow.com/questions/43483762/using-stm32-hal-timer-and-adjusting-the-duty-cycle-of-a-pwm-signal
	- Potential solution for dynamically adjusting the frequency of the PWM signal:
		https://electronics.stackexchange.com/questions/312926/dinamically-change-pwm-frequency-with-interrupt-with-stm32
	- Forum post contraining the two variables required to adjust the period and duty cycle:
		https://community.st.com/s/question/0D50X00009XkWYwSAN/stm32-pwm-with-variable-frequency
	- When creating a new instance of a PWM channel it is necessary to initialize it on your own:
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	- Further prototyping will be required to determine the proper implementation of adjusting the frequency variable:
		- Snipping from code:
			// Modifies Channel 2 Frequency.
			timer.Instance->ARR = increment;
-------------------------------------------------------
CIN: 	15:15
COUT: 	19:30
HOURS: 	

TITLE: Motor Driver Development Continued

NOTES:
	- Team members present: Antony Habib
	- Location: Biomechanics Research Building (BRB)
	- Attempt to do a live implementation of the variable motor control system
	- Utilizing the power supply from the Biomechanics Research Building to supply power to the device
	- Able to successfullly implement the motor controller in the fixed frequency configuration as done before
	- Now firmware will be updated to allow for the variation of the PWM frequency
	- Initial implementation of the tes_control function which changes the speed of the motor based on button clicks
	- Prescaler set to 84
	- Set the ARR to 100 for 10 kHz
	- Set the ARR to 200 for 5 kHz
	- Set the ARR to 1000 for 1 kHz
	- Set the ARR to 10000 for 100 Hz
	- Able to successfully adjust the speed of the motor manually using directly written values
	- In order to reduce processing time a lookup table will be used with known values when controlling the overall speed of the motor
	- Able tp successfully vary the speed of the of the motor by adjusting the counter and pulse values for the motor
	- Original Equation: fout = (fin / Presacaler) / Counter
		- Lookup table equation derivation:
	 		- fout * Prescaler / fin = Counter
	- Calculation for generatiing the counter and pulse values
		- ARR = (fout * Prescaler) / fin
		- ARR = ((fin/Pre) / fout)
-------------------------------------------------------